trigger:
- master

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'docker-hub'
  imageRepository: 'your-python-app'
  containerRegistry: 'yourdockerhubusername'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  AKSClusterName: 'yourAKSClusterName'
  AKSResourceGroup: 'yourAKSResourceGroup'
  AKSServiceConnection: 'yourAKSServiceConnection'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Cache@2
      inputs:
        key: 'docker | $(Build.SourcesDirectory)/Dockerfile'
        restoreKeys: |
          docker | $(Build.SourcesDirectory)/Dockerfile
        path: $(DOCKER_CONFIG)
      displayName: Cache Docker layers

    - task: Docker@2
      inputs:
        command: 'build'
        repository: '$(imageRepository)'
        dockerfile: '$(dockerfilePath)'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        tags: '$(tag)'

    - task: Docker@2
      inputs:
        command: 'push'
        repository: '$(imageRepository)'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        tags: '$(tag)'

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: 'drop'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(AKSServiceConnection)'
              namespace: 'default'
              command: 'apply'
              arguments: '-f $(Build.SourcesDirectory)/manifests/'